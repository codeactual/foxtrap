#!/usr/bin/php
<?php
/**
 * @TODO error checks / exceptions
 * @TODO add schema to repo (no table/database name)
 * @TODO config.php sets the table name (so tests can use diff table)
 * @TODO remove error_log use (some sort of loggable iface?)
 * @TODO all CurlyQueue options come from config.php
 * @TODO tests (use diff table)
 */

use \CurlyQueue;
use \Flow;
use \Foxtrap;
use \HTMLPurifier;
use \HTMLPurifier_Config;

require_once __DIR__ . '/../src/Foxtrap.php';

$opts = getopt('', array('file:'));

// Add $config to namespace
$configFile = __DIR__ . '/../config.php';
if (!is_readable($configFile)) {
  exit("\n{$configFile} missing or unreadable.\n");
}
require_once $configFile;

// new Foxtrap() dependency
$markDownloader = new CurlyQueue(
  array(
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_CONNECTTIMEOUT => 10,
    CURLOPT_MAXREDIRS => 5,
    CURLOPT_FOLLOWLOCATION => 1
  )
);

// new Foxtrap() dependency
$dbClass = "\\Foxtrap\\Db\\{$config['db']['class']}";
$dbLink = call_user_func_array(array($dbClass, 'createLink'), $config['db']['opts']);
require_once __DIR__ . "/../src/Db/{$dbClass}.php";
$db = new {$dbClass}($dbLink);

// new Foxtrap() dependency
$config = HTMLPurifier_Config::createDefault();
$config->set('HTML.TidyLevel', 'none');
$config->set('HTML.Allowed', '');
$config->set('Cache.SerializerPath', '/tmp');
$purifier = HTMLPurifier($config);

$foxtrap = new Foxtrap($markDownloader, $db, $purifier);

// Extract (unsorted) bookmarks from JSON file
$imported = $foxtrap->import($opts['file']);

// Call $db->register() for each bookmark
$foxtrap->registerMarks($imported['marks'], $imported['tags'], $db);
  $db->pruneRemovedMarks($latestVer);

// Enqueue marks awaiting download
$marks = $foxtrap->getMarksToDownload();
if ($marks) {
  $lastIdSeen = null;
  foreach ($marks as $mark) {
    error_log("+ {$mark['uri']}");
    $markDownloader->add($mark['uri'], $mark);
    $lastIdSeen = $mark['id'];
  }
  Flow::setMaxRuntime($markDownloader, 2 * count($marks));
  $latestVer = $db->getMarkVersion($lastIdSeen);

  $markDownloader->exec();
}
